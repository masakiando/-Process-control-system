{"version":3,"sources":["features/counter/counterSlice.tsx","middleware/logger.ts","rootReducer.tsx","store.ts","index.tsx","features/counter/Counter.tsx","App.tsx"],"names":["counterSlice","createSlice","name","initialState","theCounter","reducers","incrementCounter","state","action","incrementAcount","payload","decrementCounter","decrementAcount","resetCounter","actions","REGULAR","join","SUCCESS","STARTED","FAILURE","createLogger","active","store","next","prevState","getState","result","nextState","logGroupCollapsed","type","determineStyle","logInfo","logGroupEnd","logFunction","console","groupCollapsed","info","groupEnd","meta","async","indexOf","rootReducer","combineReducers","counter","counterReducer","configureStore","reducer","middleware","getDefaultMiddleware","process","App","require","default","ReactDOM","render","document","getElementById","Counter","dispatch","useDispatch","useSelector","className","onClick"],"mappings":"0IAAA,iHAUMA,EAAeC,YAAa,CAC9BC,KAAM,eACNC,aAN+B,CAC/BC,WAAY,GAMZC,SAAU,CACNC,iBADM,SACYC,EAAeC,GAA6C,IAAD,EACnEC,EAAe,UAAGD,EAAOE,eAAV,QAAqB,EAC1CH,EAAMH,YAAcK,GAExBE,iBALM,SAKYJ,EAAOC,GAA6C,IAAD,EAC3DI,EAAe,UAAGJ,EAAOE,eAAV,QAAqB,EAC1CH,EAAMH,YAAcQ,GAExBC,aATM,SASQN,GACVA,EAAMH,WAAa,M,EAKqCJ,EAAac,QAAlER,E,EAAAA,iBAAkBK,E,EAAAA,iBAAkBE,E,EAAAA,aAEpCb,MAAf,S,2IC5BMe,EAAU,CAAE,mBAAoB,gBAAiBC,KAAM,KAEvDC,EAAU,CAAE,oBAAqB,gBAAiBD,KAAM,KAExDE,EAAU,CAAE,yBAA0B,gBAAiBF,KAAM,KAE7DG,EAAU,CAAE,kBAAmB,gBAAiBH,KAAM,KAkB7CI,EAhByC,eAAEC,IAAF,gEAAqB,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAf,GAC1F,IAAMa,EACF,OAAOE,EAAMf,GAGjB,IAAMgB,EAAYF,EAAMG,WAClBC,EAASH,EAAMf,GACfmB,EAAYL,EAAMG,WAMxB,OALAG,EAAkB,MAAD,OAASpB,EAAOqB,KAAhB,KAA0BC,EAAgBtB,IAC3DuB,EAAS,eAAgB,oBAAqBP,GAC9CO,EAAS,mBAAoB,cAAevB,EAAOE,SACnDqB,EAAS,eAAgB,mBAAoBJ,GAC7CK,IACON,MAKX,SAASE,IACL,IAAMK,EAAgD,oBAA3BC,QAAQC,eAAgCD,QAAQC,eAAiBD,QAAQE,KACpGH,EAAW,WAAX,aAGJ,SAASD,IACL,IAAMC,EAA0C,oBAArBC,QAAQG,SAA0BH,QAAQG,SAAWH,QAAQE,KACxFH,EAAW,WAAX,aAGJ,SAASF,IAA8B,IAAD,GAClC,EAAAG,SAAQE,KAAR,mBAGJ,SAASN,EAAgBtB,GACrB,OAAMA,EAAO8B,MAAS9B,EAAO8B,KAAKC,MAI7B/B,EAAOqB,KAAKW,QAAS,eAAkB,EACjCvB,EAGNT,EAAOqB,KAAKW,QAAS,YAAe,EAC9BrB,EAGJD,EAXIH,E,kBClCA0B,EANKC,0BAAiB,CACjCC,QAASC,MCUEtB,MAXDuB,YAAgB,CAC1BC,QAASL,EACTM,WAAW,GAAD,mBAAOC,eAAP,CAA+B5B,GAAc6B,O,OCA5C,WACX,IAAMC,EAAMC,EAAS,IAAUC,QAC/BC,IAASC,OACL,kBAAC,IAAD,CAAUhC,MAAQA,GACd,kBAAC4B,EAAD,OAEJK,SAASC,eAAgB,SAGjCF,I,iFCSeG,EAhBW,WACtB,IAAMC,EAAWC,cACTvD,EAAewD,aAAa,SAAErD,GAAF,OAAwBA,EAAMoC,WAA1DvC,WAER,OACI,yBAAKyD,UAAU,WAAf,eAEK,IACAzD,EACD,4BAAQ0D,QAAU,kBAAMJ,EAAUpD,iBAAlC,aACA,4BAAQwD,QAAU,kBAAMJ,EAAU/C,iBAAlC,aACA,4BAAQmD,QAAU,kBAAMJ,EAAU7C,iBAAlC,WCVGqC,UANO,kBAClB,yBAAKW,UAAU,OACX,kBAAC,EAAD,U","file":"static/js/main.aa5c3938.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface CounterState {\n    theCounter: number;\n}\n\nconst initialState: CounterState = {\n    theCounter: 0,\n};\n\nconst counterSlice = createSlice( {\n    name: \"counterSlice\",\n    initialState,\n    reducers: {\n        incrementCounter( state: number, action: PayloadAction<number | undefined> ) {\n            const incrementAcount = action.payload ?? 1;\n            state.theCounter += incrementAcount;\n        },\n        decrementCounter( state, action: PayloadAction<number | undefined> ) {\n            const decrementAcount = action.payload ?? 1;\n            state.theCounter -= decrementAcount;\n        },\n        resetCounter( state ) {\n            state.theCounter = 0;\n        },\n    },\n} );\n\nexport const { incrementCounter, decrementCounter, resetCounter } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n","import { Middleware } from \"redux\";\n\nconst REGULAR = [ \"background: blue\", \"color: white\" ].join( \";\" );\n\nconst SUCCESS = [ \"background: green\", \"color: white\" ].join( \";\" );\n\nconst STARTED = [ \"background: darkorange\", \"color: white\" ].join( \";\" );\n\nconst FAILURE = [ \"background: red\", \"color: white\" ].join( \";\" );\n\nconst createLogger: ( active: Boolean ) => Middleware = ( active = true ) => store => next => action => {\n    if ( !active ) {\n        return next( action );\n    }\n\n    const prevState = store.getState();\n    const result = next( action );\n    const nextState = store.getState();\n    logGroupCollapsed( `%c ${ action.type } `, determineStyle( action ) );\n    logInfo( \"%cprev state\", \"color: darkorange\", prevState );\n    logInfo( \"%caction payload\", \"color: blue\", action.payload );\n    logInfo( \"%cnext state\", \"color: darkgreen\", nextState );\n    logGroupEnd();\n    return result;\n};\n\nexport default createLogger;\n\nfunction logGroupCollapsed( ...args: string[] ) {\n    const logFunction = typeof console.groupCollapsed === \"function\" ? console.groupCollapsed : console.info;\n    logFunction( ...args );\n}\n\nfunction logGroupEnd( ...args: string[] ) {\n    const logFunction = typeof console.groupEnd === \"function\" ? console.groupEnd : console.info;\n    logFunction( ...args );\n}\n\nfunction logInfo( ...args: string[] ) {\n    console.info( ...args );\n}\n\nfunction determineStyle( action: { meta: { async: any }; type: string | string[] } ) {\n    if ( !action.meta || !action.meta.async ) {\n        return REGULAR;\n    }\n\n    if ( action.type.indexOf( \"_COMPLETED\" ) > -1 ) {\n        return SUCCESS;\n    }\n\n    if ( action.type.indexOf( \"_FAILED\" ) > -1 ) {\n        return FAILURE;\n    }\n\n    return STARTED;\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport counterReducer from \"./features/counter/counterSlice\";\n\nconst rootReducer = combineReducers( {\n    counter: counterReducer,\n} );\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createLogger from \"./middleware/logger\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = configureStore( {\n    reducer: rootReducer,\n    middleware: [ ...getDefaultMiddleware(), createLogger( process.env.NODE_ENV === \"development\" ) ],\n} );\nif ( process.env.NODE_ENV === \"development\" && module.hot ) {\n    module.hot.accept( \"./rootReducer\", () => {\n        const newRootReducer = require( \"./rootReducer\" ).default;\n        store.replaceReducer( newRootReducer );\n    } );\n}\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\n\nconst render = () => {\n    const App = require( \"./App\" ).default;\n    ReactDOM.render(\n        <Provider store={ store }>\n            <App />\n        </Provider>,\n        document.getElementById( \"root\" ),\n    );\n};\nrender();\nif ( process.env.NODE_ENV === \"development\" && module.hot ) {\n    module.hot.accept( \"./App\", render );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Counter.css\";\nimport rootReducer from \"../../rootReducer\";\nimport { incrementCounter, decrementCounter, resetCounter } from \"./counterSlice\";\n\ntype RootState = ReturnType<typeof rootReducer>;\n\nconst Counter: React.FC = () => {\n    const dispatch = useDispatch();\n    const { theCounter } = useSelector( ( state: RootState ) => state.counter );\n\n    return (\n        <div className=\"Counter\">\n            the counter:\n            {\" \"}\n            {theCounter}\n            <button onClick={ () => dispatch( incrementCounter() ) }>Increment</button>\n            <button onClick={ () => dispatch( decrementCounter() ) }>Decrement</button>\n            <button onClick={ () => dispatch( resetCounter() ) }>Reset</button>\n        </div>\n    );\n};\n\nexport default Counter;\n","import React from \"react\";\nimport Counter from \"./features/counter/Counter\";\n\nconst App: React.FC = () => (\n    <div className=\"App\">\n        <Counter />\n    </div>\n);\n\nexport default App;\n"],"sourceRoot":""}